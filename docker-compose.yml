version: "3.8"

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  kafka:
    image: confluentinc/cp-kafka:7.5.1
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_started
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

      
  user_login:
    build: 
      context: ./services/user_login
    container_name: user_login
    environment:
      DB_URL: postgresql://edge:edgepass@postgres:5432/edgedb
      KAFKA_BROKER: kafka:9092
      MACHINE_ID: MACHINE_XYZ
      PLC_IP: 192.168.10.3
      PLC_PORT: 502
      MODE_REGISTER: 3309
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      kafka: 
        condition: service_healthy
    env_file:
      - ./.env

  dashboard-api:
    build:
      context: ./services/dashboard_api
    container_name: dashboard_api
    ports:
      - "8000:8000"
    environment:
      USER_SVC_URL: http://user_login:8001
      DB_URL: postgresql://edge:edgepass@postgres:5432/edgedb
      INFLUXDB_URL: http://influxdb:8086
      INFLUXDB_TOKEN: edgetoken
      INFLUXDB_ORG: EdgeOrg
      INFLUXDB_BUCKET: EdgeBucket
      KAFKA_BROKER: kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      influxdb:
        condition: service_started
      kafka:
        condition: service_healthy
      machine-interface:
        condition: service_started
      user_login:
        condition: service_started
    env_file:
      - ./.env
  polling-service:
    build:
      context: ./services/polling_service
    container_name: polling_service
    environment:
      LOCAL_SERVER_URLS: http://local-server/api/data
      LOCAL_SERVER_AUTH_TOKEN: dummy_token
      POLLING_INTERVAL: 30
      KAFKA_BROKER: kafka:9092
      DB_URL: postgresql://edge:edgepass@postgres:5432/edgedb
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    env_file:
      - ./.env
  processing-service:
    build:
      context: ./services/processing_service
    container_name: processing_service
    environment:
      MACHINE_ID: MyActualMachine123
      KAFKA_BROKER: kafka:9092
      RAW_KAFKA_TOPIC: raw_server_data
      TRIGGER_KAFKA_TOPIC: trigger_events
      PLC_WRITE_COMMANDS_TOPIC: plc_write_commands
      MES_PROCESS_CONTROL_URL: http://mes-server/api/pc
      TRACE_PROXY_HOST: trace-proxy:8765
      DB_URL: postgresql://edge:edgepass@postgres:5432/edgedb
      USER_LOGIN_URL: http://user_login:8001
      CYCLE_EVENT_TOPIC: cycle_event

    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      mqtt-broker:
        condition: service_started
    env_file:
      - ./.env

  trigger-service:
    build:
      context: ./services/trigger_service
    container_name: trigger_service
    environment:
      MQTT_BROKER: mqtt-broker
      KAFKA_BROKER: kafka:9092
      USER_LOGIN_URL: http://user_login:8001
      DB_URL: postgresql://edge:edgepass@postgres:5432/edgedb
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      mqtt-broker:
        condition: service_started
      user_login:
        condition: service_started
    env_file:
      - ./.env
  machine-interface:
    build: 
      context: ./services/machine_interface
  # network_mode: "host"  # Shares host's network stack
    container_name: machine_interface
    environment:
      DB_URL: postgresql://edge:edgepass@postgres:5432/edgedb
      PLC_IP: 192.168.10.3  # Actual PLC I
      PLC_PORT: 502
      KAFKA_BROKER: kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
      user_login:
        condition: service_started
    env_file:
      - ./.env

  oee_influx_writer:
    build:
      context: ./services/oee_influx_writer
    container_name: oee_influx_writer
    environment:
      - KAFKA_BROKER=kafka:9092
      - OEE_STATUS_TOPIC=oee_status
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=edgetoken
      - INFLUXDB_ORG=EdgeOrg
      - INFLUXDB_BUCKET=EdgeBucket
    depends_on:
      kafka:
        condition: service_healthy
      influxdb:
        condition: service_started
    env_file:
      - ./.env

  postgres:
    image: postgres:15
    container_name: edge_pg
    restart: always
    environment:
      POSTGRES_DB: edgedb
      POSTGRES_USER: edge
      POSTGRES_PASSWORD: edgepass
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./services/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U edge -d edgedb"]
      interval: 5s
      timeout: 5s
      retries: 10

  influxdb:
    image: influxdb:2.7
    container_name: influxdb
    ports:
      - "8086:8086"
    volumes:
      - influxdata:/var/lib/influxdb2
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: adminpass
      DOCKER_INFLUXDB_INIT_ORG: EdgeOrg
      DOCKER_INFLUXDB_INIT_BUCKET: EdgeBucket
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: edgetoken

  mqtt-broker:
      image: eclipse-mosquitto:2.0
      container_name: mqtt-broker
      ports:
        - "1883:1883"     # MQTT clients (like your trigger_service) connect here
        - "9001:9001"     # optional: WebSocket MQTT if you ever need it
      volumes:
        - ./mosquitto/data:/mosquitto/data       # persistent message store (if you enable persistence)
        - ./mosquitto/log:/mosquitto/log         # broker logs
      restart: unless-stopped


volumes:
  pgdata:
  influxdata:

networks:
  default:
    name: edge_net